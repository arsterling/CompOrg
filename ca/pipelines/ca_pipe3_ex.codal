/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_pipe3_ex.codal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  cycle accurate model
 */

#include "ca_defines.hcodal"
#include "debug.hcodal"

// -------------------------------------------------------------------------------------------------
// Execute Stage
// -------------------------------------------------------------------------------------------------
event ex : pipeline(pipe.EXMEM)
{
    use alu_operate;
    use ex_output;

    semantics
    {

        //Hazard Logic Detection
        //Selector for FWD1
        if((r_memwb_regwrite == true) && (r_memwb_rd != 0) && !(r_memwb_regwrite && (r_memwb_rd != 0) && (r_memwb_rd == r_idex_src1)) && (r_memwb_rd == r_idex_src1)){
            s_ex_fwd1 = DHF_WB;
        }
        else if((r_exmem_rd == r_idex_src1) && (r_exmem_rd != 0) && (r_exmem_regwrite == true)){
            s_ex_fwd1 = DHF_ME;
        }
        else{
            s_ex_fwd1 = DHF_REG;
        }
        //Selector for FWD2
        if((r_memwb_regwrite == true) && (r_memwb_rd != 0) && !(r_memwb_regwrite && (r_memwb_rd != 0) && (r_memwb_rd == r_idex_src2)) && (r_memwb_rd == r_idex_src2)){
            s_ex_fwd2 = DHF_WB;
        }
        else if((r_exmem_rd == r_idex_src2) && (r_exmem_rd != 0) && (r_exmem_regwrite == true)){
            s_ex_fwd2 = DHF_ME;
        }
        else{
            s_ex_fwd2 = DHF_REG;
        }

        //FWD1 Mux
        switch(s_ex_fwd1){
            case DHF_REG:
                s_ex_fwd1_val = r_idex_rf_src1;
                break;
            case DHF_ME:
                s_ex_fwd1_val = r_exmem_alu_result;
                break;
            case DHF_WB:
                s_ex_fwd1_val = r_memwb_data_result;
                break;
        }

        //FWD2 Mux
        switch(s_ex_fwd2){
            case DHF_REG:
                s_ex_fwd2_val = r_idex_rf_src2;
                break;
            case DHF_ME:
                s_ex_fwd2_val = r_exmem_alu_result;
                break;
            case DHF_WB:
                s_ex_fwd2_val = r_memwb_data_result;
                break;
        }

        // Develop a multiplexer for the ALU src1 operand using a switch statement using the src1_sl
        // control signal provided by the IDEX pipeline register generated by the Instruction decoder
        // Hint:  Using the standard naming protocols for this project, what prefix would you add to
        // to src1_sl to build the complete name of input value for this switch statement?
        //
        // In Assignment 5, there is only one input which is the src1 register file, rf, value and
        // this input is from the IDEX pipeline register
        switch(r_idex_src1_sl){
            case ALU_SRC1_SEL_RF:
                s_ex_src1_operand = s_ex_fwd1_val;
                break;
            default:
                break;
        }

        // Develop a multiplexer for the ALU src2 operand using a switch statement using the src2_sl
        // control signal provided by the IDEX pipeline register generated by the Instruction decoder
        // Hint:  Using the standard naming protocols for this project, what prefix would you add to
        // to src2_sl to build the complete name of input value for this switch statement?
        //
        // In Assignment 5, there are two inputs to the source 2 operand mux, the src2 register, rf, value
        // and the immediate value.  Both of these inputs are from the IDEX pipeline register
         switch(r_idex_src2_sl){
            case ALU_SRC2_SEL_RF:
                s_ex_src2_operand = s_ex_fwd2_val;
                break;
            case ALU_SRC2_SEL_IMM:
                s_ex_src2_operand = r_idex_src2_imm;
                break;
            default:
                break;
        }


        // HALT instruction detection used for simulation purposes until the load/store instructions
        // have been implemented
        if (r_idex_halt == true)
        {
            codasip_info(INFO_GENERAL, "Halt instruction indicated");
//            codasip_store_exit_code(rf_xpr[GPR_RETVAL] & 0xFF);
            #pragma simulator
            {
                codasip_halt();
            }

        }

        // If not a halt operation, call ALU routine
        alu_operate();

        // Update the pipeline registers between the Execute (EX) and MEMORY (MEM) stages
        ex_output();
    };
};

event alu_operate : pipeline(pipe.EXMEM)
{
    semantics
    {
        // A switch statement will be used to determine and evaluate the ALU operation using
        // the aluop code provided by the IDEX pipeline register whose value is determined
        // by the instruction decoder.
        //
        // Hint:  Using the standard naming protocols for this project, what prefix would you add to
        // to aluop to build the complete name of input from IDEX pipeline register for this switch 
        // statement?
        //
        // The value to assign in the case statements was added to ca_resources.codal earlier in
        // assignment 5
        switch(r_idex_aluop){
            case ALU_NOP:
                s_ex_alu_result = 0;
                break;
            case ALU_ADD:
                s_ex_alu_result = s_ex_src1_operand + s_ex_src2_operand;
                break;
            case ALU_SLT:
                if ((int32) s_ex_src1_operand < (int32) s_ex_src2_operand){
                    s_ex_alu_result = 1;
                }
                else{
                    s_ex_alu_result = 0;
                }
                break;
            case ALU_SLTU:
                if ((uint32) s_ex_src1_operand < (uint32) s_ex_src2_operand){
                    s_ex_alu_result = 1;
                }
                else{
                    s_ex_alu_result = 0;
                }
                break;
            case ALU_XOR:
                s_ex_alu_result = s_ex_src1_operand ^ s_ex_src2_operand;
                break;
            case ALU_OR:
                s_ex_alu_result = s_ex_src1_operand | s_ex_src2_operand;
                break;
            case ALU_AND:
                s_ex_alu_result = s_ex_src1_operand & s_ex_src2_operand;
                break;
            case ALU_SUB:
                s_ex_alu_result = s_ex_src1_operand - s_ex_src2_operand;
                break;
            case ALU_SLL:
                s_ex_alu_result = (int32)s_ex_src1_operand << (uint5)s_ex_src2_operand;
                break;
            case ALU_SRL:
                s_ex_alu_result = (uint32)s_ex_src1_operand >> (uint5)s_ex_src2_operand;
                break;
            case ALU_SRA:
                s_ex_alu_result = (int32)s_ex_src1_operand >> (uint5)s_ex_src2_operand;
                break;
            case ALU_SLLI:
                s_ex_alu_result = (int32)s_ex_src1_operand << (uint5)s_ex_src2_operand;
                break;
            case ALU_SRLI:
                s_ex_alu_result = (uint32)s_ex_src1_operand >> (uint5)s_ex_src2_operand;
                break;
            case ALU_SRAI:
                s_ex_alu_result = (int32)s_ex_src1_operand >> (uint5)s_ex_src2_operand;
                break;
            default:
                s_ex_alu_result = 0;
                break;
        }

    };
};


event ex_output : pipeline(pipe.EXMEM)
{
    semantics
    {
        // Store the ALU result to the EXMEM pipeline register
        // Use the pipeline register that you created earlier in Assignment 5 to pass the output
        // signal from the ALU switch statement from the alu_operate event
        r_exmem_alu_result = s_ex_alu_result;

        // Passing control signals to the next stage, MEM, through the EXMEM pipeline register.  These
        // instruction decoder signals are being passed from the IDEX pipeline to the EXMEM pipeline.
        //
        // Assign the proper IDEX pipeline register to the following EXMEM pipeline registers.
        r_exmem_rd = r_idex_rd;
        r_exmem_regwrite = r_idex_regwrite;

        // Passing Decoder control-signals to the EX stage
        r_exmem_branch_inst = r_idex_branch_inst;
        r_exmem_jump_inst = r_idex_jump_inst;
        r_exmem_mem_ops = r_idex_mem_ops;
        r_exmem_memread = r_idex_memread;
    };
};